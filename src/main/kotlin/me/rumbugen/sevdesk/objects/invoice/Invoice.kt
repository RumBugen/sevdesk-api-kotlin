package me.rumbugen.sevdesk.objects.invoice

import me.rumbugen.sevdesk.objects.SevDeskObject
import me.rumbugen.sevdesk.objects.basic.SevClient
import me.rumbugen.sevdesk.objects.contact.Contact
import me.rumbugen.sevdesk.objects.staticCountry.StaticCountry
import java.time.OffsetDateTime
import java.util.Currency
import java.util.Locale

data class Invoice(
    /**
     * The invoice id
     */
    override val id: Int,

    /**
     * The invoice number
     */
    var invoiceNumber: String? = null,

    /**
     * The contact used in the invoice
     */
    var contact: Contact? = null,

    override val create: OffsetDateTime? = null,
    override val update: OffsetDateTime? = null,
    override var sevClient: SevClient? = null,

    /**
     *The invoice date.
     */
    var invoiceDate: OffsetDateTime? = null,

    /**
     * Normally consist of prefix plus the invoice number
     */
    var header: String? = null,

    /**
     * Certain html tags can be used here to format your text
     */
    var headText: String? = null,

    /**
     * Certain html tags can be used here to format your text
     */
    var footText: String? = null,

    /**
     * The time the customer has to pay the invoice in days
     */
    var timeToPay: String? = null, // TODO: It can be an Int

    /**
     * If a value other than zero is used for the discount attribute, you need to specify the amount of days for which the discount is granted.
     */
    var discountTime: String? = null, // TODO: It can be an Int

    /**
     * If you want to give a discount, define the percentage here. Otherwise provide zero as value
     */
    var discount: String? = null, // TODO: It can be an Int

    /**
     * Can be omitted as complete address is defined in address attribute
     */
    var addressCountry: StaticCountry? = null,

    /**
     * Needs to be timestamp or dd.mm.yyyy
     */
    var payDate: OffsetDateTime? = null,

    // TODO: I do not implement createUser because I dont have the SevUser object's and endpoints

    /**
     * Timestamp. This can also be a date range if you also use the attribute deliveryDateUntil
     */
    var deliveryDate: OffsetDateTime? = null,

    /**
     * Status
     */
    var status: Status? = null,

    /**
     * Defines if the client uses the small settlement scheme. If yes, the invoice must not contain any vat
     */
    var smallSettlement: Boolean? = null, // "0" or "1"

    // TODO: I do not implement contactPerson because I dont have the SevUser object's and endpoints

    /**
     * This is not used anymore. Use the taxRate of the individual positions instead.
     */
    var taxRate: String? = null,

    // TODO: I do not implement taxRule because I dont have the TaxRule object's and endpoints

    /**
     * A common tax text would be 'Umsatzsteuer 19%'
     */
    var taxText: String? = null,

    /**
     * Defines how many reminders have already been sent for the invoice. Starts with 1 (Payment reminder) and should be incremented by one every time another reminder is sent.
     */
    var dunningLevel: String? = null,

    // TODO: I do not implement paymentMethod because I dont have the PaymentMethod object's and endpoints

    // TODO: I do not implement costCentre because I dont have the CostCentre object's and endpoints

    /**
     * The date the invoice was sent to the customer
     */
    var sendDate: OffsetDateTime? = null,

    // TODO: I do not implement origin because I dont have the Order object's and endpoints

    /**
     * Type of the invoice.
     */
    var invoiceType: InvoiceType? = null,

    /**
     * The interval in which recurring invoices are due as ISO-8601 duration.
     * Necessary attribute for all recurring invoices.
     */
    var accountIntervall: String? = null,

    /**
     * Timestamp when the next invoice will be generated by this recurring invoice.
     */
    var accountNextInvoice: String? = null,

    /**
     * Total reminder amount
     */
    var reminderTotal: String? = null,

    /**
     * Debit of the reminder
     */
    var reminderDebit: String? = null,

    /**
     * Deadline of the reminder as timestamp
     */
    var reminderDeadline: OffsetDateTime? = null,

    /**
     * The additional reminder charge
     */
    var reminderCharge: String? = null,

    /**
     * Complete address of the recipient including name, street, city, zip and country. * Line breaks can be used and will be displayed on the invoice pdf.
     */
    var address: String? = null,

    /**
     * Currency used in the invoice. Needs to be currency code according to ISO-4217
     */
    var currency: Currency? = null,

    /**
     * Net sum of the invoice
     */
    var sumNet: Float? = null, // "123.2"

    /**
     * Tax sum of the invoice
     */
    var sumTax: Float? = null, // "123.2"

    /**
     * Gross sum of the invoice
     */
    var sumGross: Float? = null, // "123.2"

    /**
     * Sum of all discounts in the invoice
     */
    var sumDiscounts: Float? = null, // "123.2"

    /**
     * Net sum of the invoice in the foreign currency
     */
    var sumNetForeignCurrency: Float? = null, // "123.2"

    /**
     * Tax sum of the invoice in the foreign currency
     */
    var sumTaxForeignCurrency: Float? = null, // "123.2"

    /**
     * Gross sum of the invoice in the foreign currency
     */
    var sumGrossForeignCurrency: Float? = null, // "123.2"

    /**
     * Discounts sum of the invoice in the foreign currency
     */
    var sumDiscountsForeignCurrency: Float? = null, // "123.2"

    /**
     * Net accounting sum of the invoice. Is usually the same as sumNet
     */
    var sumNetAccounting: Float? = null, // "123.2"

    /**
     * Tax accounting sum of the invoice. Is usually the same as sumTax
     */
    var sumTaxAccounting: Float? = null, // "123.2"

    /**
     * Gross accounting sum of the invoice. Is usually the same as sumGross
     */
    var sumGrossAccounting: Float? = null, // "123.2"

    /**
     * Amount which has already been paid for this invoice by the customer
     */
    var paidAmount: Float? = null,

    /**
     * Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer'
     */
    var customerInternalNote: String? = null,

    /**
     * If true, the net amount of each position will be shown on the invoice. Otherwise gross amount
     */
    var showNet: Boolean? = null, // as string 0 or 1

    /**
     * Enshrined invoices cannot be changed. Can only be set via Invoice/{invoiceId}/enshrine. This operation cannot be undone.
     */
    var enshrined: OffsetDateTime? = null,

    /**
     * Type which was used to send the invoice. IMPORTANT: Please refer to the invoice section of the * API-Overview to understand how this attribute can be used before using it!
     */
    var sendType: SendType? = null,

    /**
     * If the delivery date should be a time range, another timestamp can be provided in this attribute * to define a range from timestamp used in deliveryDate attribute to the timestamp used here
     */
    var deliveryDateUntil: String? = null,
): SevDeskObject(id) {
    enum class Status(val idRepresentation: Int) {
        Deactivated(50),
        Draft(100),
        Open(200),
        PartiallyPaid(750),
        Paid(1000);

        companion object {
            fun getByID(id: Int): Status? {
                return entries.find { it.idRepresentation == id }
            }
        }
    }

    enum class SendType {
        /**
         * Printed
         */
        VPR,

        /**
         * Downloaded PDF
         */
        VPDF,

        /**
         * Mailed
         */
        VM,

        /**
         * Postal
         */
        VP
    }
}